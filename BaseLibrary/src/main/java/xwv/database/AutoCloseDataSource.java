package xwv.database;

import javax.sql.DataSource;
import java.sql.*;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

public class AutoCloseDataSource {
    private DataSource dataSource;

    private ReadWriteLock lock = new ReentrantReadWriteLock(true);

    public ReadWriteLock getLock() {
        return lock;
    }

    public DataSource getDataSource() {
        return dataSource;
    }

    public AutoCloseDataSource(DataSource dataSource) throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            this.dataSource = dataSource;
        }
    }


    public <T> T query(DataSourceCallBack<T> callback, String sql) {
        try {
            try (Connection connection = dataSource.getConnection();
                 Statement statement = connection.createStatement();
                 ResultSet resultSet = statement.executeQuery(sql)) {
                return callback.callback(resultSet);
            }
        } catch (SQLException e) {
            e.printStackTrace(System.out);
            return null;
        }
    }


    public int update(String sql) throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            return statement.executeUpdate(sql);
        }
    }


    public <T> T execute(DataSourceExecutor<T> executor) {
        try {
            try (Connection connection = dataSource.getConnection();
                 Statement statement = connection.createStatement()) {
                return executor.execute(statement);
            }
        } catch (SQLException e) {
            e.printStackTrace(System.out);
            return null;
        }
    }

    public <T> T execute(String sql, DataSourcePreparedExecutor<T> executor) {
        try {
            try (Connection connection = dataSource.getConnection();
                 PreparedStatement statement = connection.prepareStatement(sql)) {
                return executor.execute(statement);
            }
        } catch (SQLException e) {
            e.printStackTrace(System.out);
            return null;
        }
    }


    public boolean execute(String sql) throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            return statement.execute(sql);
        }
    }


    public int update(String sql, int autoGeneratedKeys) throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            return statement.executeUpdate(sql, autoGeneratedKeys);
        }
    }

    public int updateWithGeneratedKeys(String sql) throws SQLException {
        return update(sql, Statement.RETURN_GENERATED_KEYS);
    }


    public int update(String sql, int[] columnIndexes) throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            return statement.executeUpdate(sql, columnIndexes);
        }
    }


    public int update(String sql, String[] columnNames) throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            return statement.executeUpdate(sql, columnNames);
        }
    }


    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            return statement.execute(sql, autoGeneratedKeys);
        }
    }


    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            return statement.execute(sql, columnIndexes);
        }
    }


    public boolean execute(String sql, String[] columnNames) throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            return statement.execute(sql, columnNames);
        }
    }


}
